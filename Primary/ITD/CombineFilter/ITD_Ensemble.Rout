
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ####################################################################################################################
> ####################################################################################################################
> # Combine ITD results from Pindel, getITD and VarDict.
> # Author: Haiying Kong
> # Last Modified: 5 May 2021
> ####################################################################################################################
> ####################################################################################################################
> setwd('/home/projects/cu_10184/projects/PTH/AllBatches/ITD')
> options(stringsAsFactors=FALSE)
> rm(list=ls())
> 
> library(xlsx)
> 
> ####################################################################################################################
> # Set parameter.
> thresh.n.alt = 1
> 
> ####################################################################################################################
> ####################################################################################################################
> # Read in ITD calls and organize the data.
> ####################################################################################################################
> # VarDict:
> vardict = read.table('VarDict/VarDict.maf', header=TRUE, quote='', sep='\t')[ ,c(1,2,4,5,17,12,15)]
> names(vardict) = c('Batch', 'Sample', 'Chrom', 'Start', 'N_Alt', 'DP', 'AF')
> vardict = vardict[vardict$N_Alt>thresh.n.alt, ]
> vardict = vardict[ ,c('Batch', 'Sample', 'Chrom', 'Start', 'N_Alt', 'DP', 'AF')]
> 
> vardict = vardict[order(vardict$Batch,vardict$Sample,vardict$Chrom,vardict$Start), ]
> vardict = aggregate(cbind(Start,N_Alt,DP,AF) ~ Batch+Sample+Chrom, data=vardict, list)
> 
> # Aggregate redundancies.
> aster = data.frame(Batch='BatchName', Sample='SampleName', Chrom='chr13', Start=12345, N_Alt=12, DP=1234, AF=0.1234)
> for (i in 1:nrow(vardict))  {
+   start = unlist(vardict$Start[i])
+   n_alt = unlist(vardict$N_Alt[i])
+   dp = unlist(vardict$DP[i])
+   af = unlist(vardict$AF[i])
+   if (length(start)==1)  {
+     i.aster = nrow(aster) + 1
+     aster[i.aster, ] = NA
+     aster[i.aster, 1:3] = vardict[i, 1:3]
+     aster[i.aster, 4:6] = c(start, n_alt, dp)
+     aster$AF[i.aster] = af
+     }  else  {
+     if (min(diff(start))>2)  {
+       nrow.tmp = length(start)
+       tmp = data.frame(Batch = rep(vardict$Batch[i], nrow.tmp),
+                        Sample = rep(vardict$Sample[i], nrow.tmp),
+                        Chrom = rep(vardict$Chrom[i], nrow.tmp),
+                        Start = start,
+                        N_Alt = n_alt,
+                        DP = dp,
+                        AF = af)
+       aster = rbind(aster, tmp)
+       }  else   {
+       i.tmp = 1
+       tmp = data.frame(Start = start[1], 
+                        N_Alt = n_alt[1],
+                        DP = dp[1], 
+                        AF = af[1])
+       for (i.start in 2:length(start))  {
+         if ((start[i.start]-start[i.start-1])<=2)  {
+           i.tmp = i.tmp + 1
+           tmp[i.tmp, ] = NA
+           tmp[i.tmp, 1:3] = c(start[i.start], n_alt[i.start], dp[i.start])
+           tmp[i.tmp, 4] = af[i.start]
+           }  else  {
+           tmp.start = median(tmp$Start)
+           tmp.n_alt = max(tmp$N_Alt)
+           tmp.dp = max(tmp$DP)
+           tmp.af = max(tmp$AF)
+           i.aster = nrow(aster) + 1
+           aster[i.aster, ] = NA
+           aster[i.aster, 1:3] = vardict[i, 1:3]
+           aster[i.aster, 4:6] = c(tmp.start, tmp.n_alt, tmp.dp)
+           aster$AF[i.aster] = tmp.af
+ 
+           i.tmp = 1
+           tmp = data.frame(Start = start[i.start],
+                            N_Alt = n_alt[i.start],
+                            DP = dp[i.start], 
+                            AF = af[i.start]) 
+           }
+         if (i.start == length(start))  {
+           if (nrow(tmp)==1)  {
+             i.aster = nrow(aster) + 1
+             aster[i.aster, ] = NA
+             aster[i.aster, 1:3] = vardict[i, 1:3]
+             aster[i.aster, 4:7] = tmp
+             }  else  {
+             tmp.start = median(tmp$Start)
+             tmp.n_alt = max(tmp$N_Alt)
+             tmp.dp = max(tmp$DP)
+             tmp.af = max(tmp$AF)
+             i.aster = nrow(aster) + 1
+             aster[i.aster, 1:3] = vardict[i, 1:3]
+             aster[i.aster, 4:6] = c(tmp.start, tmp.n_alt, tmp.dp)
+             aster$AF[i.aster] = tmp.af
+             }
+           }
+         }
+       }
+     }
+   }
> 
> vardict = aster[-1, ]
> 
> ####################################################################################################################
> # Pindel:
> pindel = read.table('Pindel/Pindel.txt', header=TRUE, quote='', sep='\t')
> pindel$Caller = 'Pindel'
> pindel$DP = pindel$N_Alt + pindel$N_Ref
> pindel$AF = round(pindel$N_Alt/pindel$DP, 4)
> pindel$Length = pindel$End - pindel$Start
> pindel = pindel[ ,c('Batch', 'Sample', 'Caller', 'Chrom', 'Start', 'End', 'Length', 'N_Alt', 'DP', 'AF', 'Validated')]
> pindel = pindel[pindel$N_Alt>thresh.n.alt, ]
> 
> ####################################################################################################################
> # getITD:
> getitd = read.table('getITD/getITD.txt', header=TRUE, quote='', sep='\t')
> getitd$Caller = 'getITD'
> getitd$AF = round(getitd$N_Alt/getitd$DP, 4)
> getitd$Length = getitd$End - getitd$Start
> getitd = getitd[ ,c('Batch', 'Sample', 'Caller', 'Chrom', 'Start', 'End', 'Length', 'N_Alt', 'DP', 'AF', 'Validated')]
> getitd = getitd[getitd$N_Alt>thresh.n.alt, ]
> getitd = aggregate(cbind(N_Alt,DP,AF) ~ Batch+Sample+Caller+Chrom+Start+End+Length+Validated, data=getitd, max)
> 
> ####################################################################################################################
> # Combines ITD calls from Pindel and getITD.
> itd = rbind(pindel, getitd)
> itd = itd[order(itd$Batch, itd$Sample, itd$Chrom, itd$End), ]
> itd = aggregate(cbind(Caller,Start,End,Length,N_Alt,DP,AF) ~ Batch+Sample+Chrom+Validated, data=itd, list)
> 
> # Get final list allowing margin by 1~2bp.
> apple = data.frame(Batch='BatchName', Sample='SampleName', Chrom='chr13', Validated=0, Caller='getITD', Start=12345, End=54321, Length=20, N_Alt=12, DP=1234, AF=0.1234)
> 
> for (i in 1:nrow(itd))  {
+   caller = unlist(itd$Caller[i])
+   start = as.integer(unlist(itd$Start[i]))
+   end = as.integer(unlist(itd$End[i]))
+   len = as.integer(unlist(itd$Length[i]))
+   n_alt = as.integer(unlist(itd$N_Alt[i]))
+   dp = as.integer(unlist(itd$DP[i]))
+   af = as.numeric(unlist(itd$AF[i]))
+   if (length(end)==1)  {
+     i.apple = nrow(apple) + 1
+     apple[i.apple, ] = NA
+     apple[i.apple, 1:4] = itd[i, 1:4]
+     apple$Caller[i.apple] = caller
+     apple[i.apple, 6:10] = c(start, end, len, n_alt, dp)
+     apple$AF[i.apple] = af
+     }  else  {
+     if (min(diff(end))>2)  {
+       nrow.tmp = length(end)
+       tmp = data.frame(Batch = rep(itd$Batch[i], nrow.tmp),
+                        Sample = rep(itd$Sample[i], nrow.tmp),
+                        Chrom = rep(itd$Chrom[i], nrow.tmp),
+                        Validated = rep(itd$Validated[i], nrow.tmp),
+                        Caller = caller,
+                        Start = start,
+                        End = end,
+                        Length = len,
+                        N_Alt = n_alt,
+                        DP = dp,
+                        AF = af)
+       apple = rbind(apple, tmp)
+       }  else   {
+       i.tmp = 1
+       tmp = data.frame(Caller = caller[1],
+                        Start = start[1],
+                        End = end[1],
+                        Length = len[1],
+                        N_Alt = n_alt[1],
+                        DP = dp[1],
+                        AF = af[1])
+       for (i.end in 2:length(end))  {
+         if ((end[i.end]-end[i.end-1])<=2)  {
+           i.tmp = i.tmp + 1
+           tmp[i.tmp, ] = NA
+           tmp$Caller[i.tmp] = caller[i.end]
+           tmp[i.tmp, 2:6] = c(start[i.end], end[i.end], len[i.end], n_alt[i.start], dp[i.start])
+           tmp$AF[i.tmp] = af[i.end]
+           }  else  {
+           tmp.caller = paste(tmp$Caller, collapse=',')
+           tmp.start = paste(tmp$Start, collapse=',')
+           tmp.end = paste(tmp$End, collapse=',')
+           tmp.len = paste(tmp$Length, collapse=',')
+           tmp.n_alt = paste(tmp$N_Alt, collapse=',')
+           tmp.dp = paste(tmp$DP, collapse=',')
+           tmp.af = paste(tmp$AF, collapse=',')
+           i.apple = nrow(apple) + 1
+           apple[i.apple, ] = NA
+           apple[i.apple, 1:4] = itd[i, 1:4]
+           apple$Caller[i.apple] = tmp.caller
+           apple[i.apple, 6:10] = c(tmp.start, tmp.end, tmp.len, tmp.n_alt, tmp.dp)
+           apple$AF[i.apple] = tmp.af
+ 
+           i.tmp = 1
+           tmp = data.frame(Caller = caller[i.end],
+                            Start = start[i.end],
+                            End = end[i.end],
+                            Length = len[i.end],
+                            N_Alt = n_alt[i.end],
+                            DP = dp[i.end],
+                            AF = af[i.end])
+           }
+         if (i.end == length(end))  {
+           if (nrow(tmp)==1)  {
+             i.apple = nrow(apple) + 1
+             apple[i.apple, ] = NA
+             apple[i.apple, 1:4] = itd[i, 1:4]
+             apple[i.apple, 5:11] = tmp
+             }  else  {
+             tmp.caller = paste(tmp$Caller, collapse=',')
+             tmp.start = paste(tmp$Start, collapse=',')
+             tmp.end = paste(tmp$End, collapse=',')
+             tmp.len = paste(tmp$Length, collapse=',')
+             tmp.n_alt = paste(tmp$N_Alt, collapse=',')
+             tmp.dp = paste(tmp$DP, collapse=',')
+             tmp.af = paste(tmp$AF, collapse=',')
+             i.apple = nrow(apple) + 1
+             apple[i.apple, ] = NA 
+             apple[i.apple, 1:4] = itd[i, 1:4]
+             apple$Caller[i.apple] = tmp.caller
+             apple[i.apple, 6:10] = c(tmp.start, tmp.end, tmp.len, tmp.n_alt, tmp.dp)
+             apple$AF[i.apple] = tmp.af
+             }
+           }
+         }
+       }
+     }
+   }
> apple = apple[-1, ]
> 
> ####################################################################################################################
> # Update VAF with VarDict calls.
> apple$VarDict_N_Alt = 0
> apple$VarDict_DP = 0
> apple$VarDict_AF = 0.0
> 
> for (i in 1:nrow(apple))  {
+   starts = as.numeric(unlist(strsplit(apple$Start[i], ',')))
+   var = vardict[(vardict$Batch==apple$Batch[i] & vardict$Sample==apple$Sample[i]), ]
+   if (nrow(var)>0)   {
+     tmp.n_alt = c()
+     tmp.dp = c()
+     tmp.af = c()
+     for (start in starts)  {
+       dist = var$Start - start
+       if (min(abs(dist)) <= 2)  {
+         i.var = which(abs(dist) == min(abs(dist)))
+         tmp.n_alt = c(tmp.n_alt, var$N_Alt[i.var])
+         tmp.dp = c(tmp.dp, var$DP[i.var])
+         tmp.af = c(tmp.af, var$AF[i.var])
+         }
+       }
+     if (length(tmp.n_alt)>0)   {
+       apple$VarDict_N_Alt[i] = paste(unique(tmp.n_alt), collapse=',')
+       apple$VarDict_DP[i] = paste(unique(tmp.dp), collapse=',')
+       apple$VarDict_AF[i] = paste(unique(tmp.af), collapse=',')
+       }
+     }
+   }
> 
> apple = apple[order(apple$Batch, apple$Sample, apple$Start), ]
> 
> ####################################################################################################################
> # Save the results.
> write.table(apple, 'Ensemble/Final_ITD_List.txt', row.names=FALSE, col.names=TRUE, quote=FALSE, sep='\t')
> write.xlsx(apple, 'Ensemble/Final_ITD_List.xlsx', sheetName='getITD',
+            row.names=FALSE, col.names=TRUE, append=FALSE)
> 
> ####################################################################################################################
> ####################################################################################################################
> 
> proc.time()
   user  system elapsed 
  2.103   0.244   1.415 
